/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var _templateObject, _templateObject2, _templateObject3;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// TODO: move to Ozds.Modules.Ozds or something and use TypeScript
// TODO: better error management
// NOTE: requires luxon

/**
 * @typedef {Window & GraphQL} GraphQLWindow
 */

/**
 * @typedef {Object} GraphQL
 * @property {typeof getDashboardMeasurements}
 *   getDashboardMeasurements
 * @property {typeof getDashboardMeasurementsByOwner}
 *   getDashboardMeasurementsByOwner
 * @property {typeof getDashboardMeasurementsByOwnerUser}
 *   getDashboardMeasurementsByOwnerUser
 * @property {typeof normalizeDashboardMeasurements}
 *   normalizeDashboardMeasurements
 * @property {typeof normalizeMultiDashboardMeasurements}
 *   normalizeMultiDashboardMeasurements
 * @property {typeof deserializePeriod}
 *   deserializePeriod
 * @property {typeof serializePeriod}
 *   serializePeriod
 * @property {typeof deserializeDateTime}
 *   deserializeDateTime
 * @property {typeof serializeDateTime}
 *   serializeDateTime
 */

/**
 * @param {string} deviceId
 * @param {Period} period
 * @returns {Promise<DashboardMeasurement[]>}
 */
var getDashboardMeasurements = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(deviceId, period) {
    var response;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return query({
              query: gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      query ($deviceId: String!, $period: PeriodInput) {\n        dashboardMeasurements(deviceId: $deviceId, period: $period) {\n          timestamp\n          deviceId\n          data {\n            energy\n            highCostEnergy\n            lowCostEnergy\n            power\n            powerL1\n            powerL2\n            powerL3\n            currentL1\n            currentL2\n            currentL3\n            voltageL1\n            voltageL2\n            voltageL3\n          }\n        }\n      }\n    "]))),
              variables: {
                deviceId: deviceId,
                period: serializePeriod(period)
              }
            });

          case 2:
            response = _context.sent;

            if (response) {
              _context.next = 5;
              break;
            }

            throw new Error("Failed fetching");

          case 5:
            return _context.abrupt("return", normalizeDashboardMeasurements(response.data.dashboardMeasurements));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getDashboardMeasurements(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * @param {string} ownerId
 * @param {Period} period
 * @returns {Promise<MultiDashboardMeasurements>}
 */


var getDashboardMeasurementsByOwner = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(ownerId, period) {
    var response;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return query({
              query: gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      query ($ownerId: String!, $period: PeriodInput) {\n        dashboardMeasurementsByOwner(ownerId: $ownerId, period: $period) {\n          deviceIds\n          measurements {\n            timestamp\n            data {\n              deviceId\n              data {\n                energy\n                highCostEnergy\n                lowCostEnergy\n                power\n                powerL1\n                powerL2\n                powerL3\n                currentL1\n                currentL2\n                currentL3\n                voltageL1\n                voltageL2\n                voltageL3\n              }\n            }\n          }\n        }\n      }\n    "]))),
              variables: {
                ownerId: ownerId,
                period: serializePeriod(period)
              }
            });

          case 2:
            response = _context2.sent;

            if (response) {
              _context2.next = 5;
              break;
            }

            throw new Error("Failed fetching");

          case 5:
            return _context2.abrupt("return", normalizeMultiDashboardMeasurements(response.data.dashboardMeasurementsByOwner));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getDashboardMeasurementsByOwner(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * @param {string} ownerUserId
 * @param {Period} period
 * @returns {Promise<MultiDashboardMeasurements>}
 */


var getDashboardMeasurementsByOwnerUser = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(ownerUserId, period) {
    var response;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return query({
              query: gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      query ($ownerUserId: String!, $period: PeriodInput) {\n        dashboardMeasurementsByOnwerUser(\n          ownerUserId: $ownerUserId\n          period: $period\n        ) {\n          deviceIds\n          measurements {\n            timestamp\n            data {\n              deviceId\n              data {\n                energy\n                highCostEnergy\n                lowCostEnergy\n                power\n                powerL1\n                powerL2\n                powerL3\n                currentL1\n                currentL2\n                currentL3\n                voltageL1\n                voltageL2\n                voltageL3\n              }\n            }\n          }\n        }\n      }\n    "]))),
              variables: {
                ownerUserId: ownerUserId,
                period: serializePeriod(period)
              }
            });

          case 2:
            response = _context3.sent;

            if (response) {
              _context3.next = 5;
              break;
            }

            throw new Error("Failed fetching");

          case 5:
            return _context3.abrupt("return", normalizeMultiDashboardMeasurements(response.data.dashboardMeasurementsByOnwerUser));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getDashboardMeasurementsByOwnerUser(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * @param {any} multi
 * @returns {MultiDashboardMeasurements}
 */


var normalizeMultiDashboardMeasurements = function normalizeMultiDashboardMeasurements(multi) {
  return _objectSpread(_objectSpread({}, multi), {}, {
    measurements: multi.measurements.map(function (measurement) {
      return _objectSpread(_objectSpread({}, measurement), {}, {
        timestamp: deserializeDateTime(measurement.timestamp)
      });
    }).sort(function (a, b) {
      return compareDateTime(a.timestamp, b.timestamp);
    })
  });
};
/**
 * @param {any} measurements
 * @returns {DashboardMeasurement[]}
 */


var normalizeDashboardMeasurements = function normalizeDashboardMeasurements(measurements) {
  return measurements.map(function (measurement) {
    return _objectSpread(_objectSpread({}, measurement), {}, {
      timestamp: deserializeDateTime(measurement.timestamp)
    });
  }).sort(function (a, b) {
    return compareDateTime(a.timestamp, b.timestamp);
  });
};
/**
 * @param {SerializedPeriod} period
 * @returns {Period}
 */


var deserializePeriod = function deserializePeriod(period) {
  return {
    from: deserializeDateTime(period.from),
    to: deserializeDateTime(period.to)
  };
};
/**
 * @param {Period} period
 * @returns {SerializedPeriod}
 */


var serializePeriod = function serializePeriod(period) {
  return {
    from: serializeDateTime(period.from),
    to: serializeDateTime(period.to)
  };
};
/**
 * @param {string} dateTime
 * @returns {DateTime}
 */


var deserializeDateTime = function deserializeDateTime(dateTime) {
  return luxon.DateTime.fromISO(dateTime, {
    zone: "utc"
  });
};
/**
 * @param {DateTime} dateTime
 * @returns {string}
 */


var serializeDateTime = function serializeDateTime(dateTime) {
  return dateTime.toISO();
};
/**
 * @typedef {Object} DashboardMeasurementData
 * @property {number} energy
 * @property {number} highCostEnergy
 * @property {number} lowCostEnergy
 * @property {number} power
 * @property {number} powerL1
 * @property {number} powerL2
 * @property {number} powerL3
 * @property {number} currentL1
 * @property {number} currentL2
 * @property {number} currentL3
 * @property {number} voltageL1
 * @property {number} voltageL2
 * @property {number} voltageL3
 */

/**
 * @typedef {Object} DashboardMeasurement
 * @property {luxon.DateTime} timestamp
 * @property {string} deviceId
 * @property {DashboardMeasurementData} data
 */

/**
 * @typedef {Object} DeviceDashboardMeasurementData
 * @property {string} deviceId
 * @property {DashboardMeasurementData} data
 */

/**
 * @typedef {Object} MultiDashboardMeasurementData
 * @property {luxon.DateTime} timestamp
 * @property {DeviceDashboardMeasurementData[]} data
 */

/**
 * @typedef {Object} MultiDashboardMeasurements
 * @property {string[]} deviceIds
 * @property {MultiDashboardMeasurementData[]} data
 */

/**
 * @typedef {Object} Period
 * @property {luxon.DateTime} from
 * @property {luxon.DateTime} to
 */

/**
 * @typedef {Object} SerializedPeriod
 * @property {string} from
 * @property {string} to
 */


var query = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(body) {
    var response, result;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return fetch("https://localhost:5001/graphql", {
              method: "POST",
              body: JSON.stringify(body),
              headers: {
                "content-type": "application/json"
              }
            });

          case 3:
            response = _context4.sent;
            _context4.next = 6;
            return response.json();

          case 6:
            result = _context4.sent;
            return _context4.abrupt("return", result);

          case 10:
            _context4.prev = 10;
            _context4.t0 = _context4["catch"](0);
            console.log(_context4.t0);

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 10]]);
  }));

  return function query(_x7) {
    return _ref4.apply(this, arguments);
  };
}(); // NOTE: https://stackoverflow.com/a/64855525/4348107


var compareDateTime = function compareDateTime(a, b) {
  return a.toMillis() - b.toMillis();
};

window.GraphQL = {
  getDashboardMeasurements: getDashboardMeasurements,
  getDashboardMeasurementsByOwner: getDashboardMeasurementsByOwner,
  getDashboardMeasurementsByOwnerUser: getDashboardMeasurementsByOwnerUser,
  normalizeDashboardMeasurements: normalizeDashboardMeasurements,
  normalizeMultiDashboardMeasurements: normalizeMultiDashboardMeasurements,
  deserializePeriod: deserializePeriod,
  serializePeriod: serializePeriod,
  deserializeDateTime: deserializeDateTime,
  serializeDateTime: serializeDateTime
}; // NOTE: just for intellisense

var gql = function gql(strings) {
  return strings[0];
};