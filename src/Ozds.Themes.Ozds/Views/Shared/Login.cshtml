@using Microsoft.AspNetCore.Identity
@using OrchardCore.Entities
@using OrchardCore.Settings
@using OrchardCore.Users
@using OrchardCore.Users.Models
@using Ozds.Util

@model OrchardCore.Users.ViewModels.LoginViewModel

@inject ISiteService SiteService
@inject SignInManager<IUser> SignInManager
@inject UserManager<IUser> UserManager;

@{
	ViewLayout = "Layout__Login";

	var siteSettings = await SiteService.GetSiteSettingsAsync();
  var registrationSettings = siteSettings.As<RegistrationSettings>();
  var resetPasswordSettings = siteSettings.As<ResetPasswordSettings>();
  var loginSettings = siteSettings.As<LoginSettings>();

  var externalAuthenticationSchemes = await SignInManager
      .GetExternalAuthenticationSchemesAsync()
      .Then(Enumerable.ToList);

	var userCanRegister =
      registrationSettings.UsersCanRegister ==
      UserRegistrationType.AllowRegistration;
	var allowResetPassword = resetPasswordSettings.AllowResetPassword;
	var disableLocalLogin = loginSettings.DisableLocalLogin;
}

@{ Html.RenderPartial("_Header", @T["Log In"].Value); }

<div class="container login-container">
	<div class="row">
    @if (!disableLocalLogin)
    {
      <div class='col-md-6 fs-6
          @(externalAuthenticationSchemes.Count == 0 ? "offset-md-0"
            : String.Empty)'>
        <h4>
          @T["Log In"]
        </h4>

        <hr />
        <span asp-validation-for="UserName" class="text-danger">
        </span>

        <form
            asp-controller="Account"
            asp-action="Login"
            asp-route-returnurl='@ViewData["ReturnUrl"]'
            method="post"
            class="mb-4"
            id="auth-form">
          <div asp-validation-summary="All" class="text-danger">
          </div>

          <div class="form-floating">
            <input
                asp-for="UserName"
                class="form-control content-preview-text"
                autofocus tabindex="1"
                placeholder="smth" />
            <label asp-for="UserName">
              @T["Username or email address"]
            </label>
          </div>

          <div class="form-floating">
            <input
                asp-for="Password"
                class="form-control content-preview-text"
                tabindex="2"
                placeholder="smth" />
            <label asp-for="Password">
              @T["Password"]
            </label>
          </div>

          <div class="form-check fs-6 mt-4">
            <input
                asp-for="RememberMe"
                class="form-check-input"
                tabindex="3"
                placeholder="smth">
            <label asp-for="RememberMe" class="custom-control-label">
              @T["Remember me"]
            </label>
          </div>

          <div class="form-check fs-6">
            <label
                asp-for="Password"
                class="mb-4 fs-6">
              <a
                  asp-controller="ResetPassword"
                  asp-action="ForgotPassword"
                  class="label-link">
                @T["Forgot your password?"]
              </a>
            </label>
          </div>

          @await RenderSectionAsync("AfterLogin", required: false)

          <button
              type="submit"
              class="btn btn-primary"
              tabindex="4">
            @T["Log in"]
          </button>
        </form>
      </div>


      @if (userCanRegister)
      {
        <div class="col-md-6 fs-6">
          <div class="auth-form">
            <h4>
              @T["Register"]
            </h4>

            <hr />
            <div class="form-floating">
              <p>
                @T["Register if you are a consumer or center owner"]
              </p>

              <a
                  asp-controller="Registration"
                  class="btn btn-info"
                  asp-action="Register"
                  asp-route-returnurl='@ViewData["ReturnUrl"]'>
                @T["Sign Up"]
              </a>
            </div>
          </div>
        </div>
      }
    }

    @if (externalAuthenticationSchemes.Count > 0)
    {
      <div class="col-md-6 @(disableLocalLogin ? "offset-md-3" : String.Empty)">
        <section>
          <h4>
            @T["Use another service to log in"]
          </h4>
          <hr />

          <form
              asp-controller="Account"
              asp-action="ExternalLogin"
              asp-route-returnurl='@ViewData["ReturnUrl"]'
              method="post"
              class="form-horizontal">
            <div>
              <p>
                @foreach (var scheme in externalAuthenticationSchemes)
                {
                  <button
                      type="submit"
                      class='btn btn-primary
                        @(disableLocalLogin ? "w-100" : String.Empty)'
                      name="scheme"
                      value='@scheme.Name'
                      title='@(
                          scheme?.DisplayName is not null ?
                          T["Log in using your {0} account",
                            scheme.DisplayName] :
                          String.Empty
                        )'>
                    @scheme?.DisplayName
                  </button>
                  @if (disableLocalLogin)
                  {
                    <br />
                  }
                }
              </p>
            </div>
          </form>
        </section>
      </div>
    }
	</div>
</div>

<script asp-name="ozdstheme-login" at="Foot" />
<script at="Foot">
  // NOTE: legacy login
  // window.onload = () => interceptLogin('auth-form', "UserName", "Password");
</script>
