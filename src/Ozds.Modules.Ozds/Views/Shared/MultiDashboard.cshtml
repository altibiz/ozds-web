@using Microsoft.Extensions.Hosting
@using Ozds.Elasticsearch
@using Ozds.Extensions

@model InitialQuery<IEnumerable<DashboardMeasurement>>

@inject IHostEnvironment Env

@if (Model.Result.EmptyEnumerable())
{
  <span>
    @(T["No measurements available"].Value)
  </span>
  return;
}

<div class="d-flex flex-column mb-5" style="height: 400px;">
  <h5>
    @(T["Energy"].Value)
  </h5>
  <div class="d-flex flex-column flex-lg-row w-100 flex-grow-1">
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="energy-lines" />
    </div>
  </div>
</div>

<div class="d-flex flex-column mb-5" style="height: 400px;">
  <h5>
    @(T["Power"].Value)
  </h5>
  <div class="d-flex flex-column flex-lg-row w-100 flex-grow-1">
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="power-lines" />
    </div>
  </div>
</div>

<script at="Foot">
  const createCharts = (measurements, rainbow, max, culture) =>
    ({
      measurements,
      energyLines: new Chart(
        "energy-lines",
        {
          type: "line",
          data: {
            datasets: Object
              .entries(measurements)
              .map(([deviceId, deviceMeasurements], index) =>
                ({
                  label: `@T["Energy of"].Value ${deviceId} (kW)`,
                  data: deviceMeasurements,
                  parsing: {
                    xAxisKey: "timestamp",
                    yAxisKey: "data.energy"
                  },
                  borderColor: rainbow[index % rainbow.length],
                  backgroundColor: rainbow[index % rainbow.length],
                })),
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: true
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
            },
          },
        }),

      powerLines: new Chart(
        "power-lines",
        {
          type: "line",
          data: {
            datasets: Object
              .entries(measurements)
              .map(([deviceId, deviceMeasurements], index) =>
                ({
                  label: `@T["Energy of"].Value ${deviceId} (kW)`,
                  data: deviceMeasurements,
                  parsing: {
                    xAxisKey: "timestamp",
                    yAxisKey: "data.power"
                  },
                  borderColor: rainbow[index % rainbow.length],
                  backgroundColor: rainbow[index % rainbow.length],
                })),
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: true
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
            },
          },
        }),
    })

  const updateCharts = (measurements, max, culture, charts) => {
    Object
      .entries(charts.measurements)
      .forEach(([deviceId, deviceMeasurements]) =>
        measurements[deviceId] && deviceMeasurements
          .push(...measurements[deviceId]));
    charts.energyLines.update();
    charts.powerLines.update();

    return charts;
  };

  const createRainbow = (measurements, max, culture) =>
    [
      "Red",
      "Green",
      "Blue",
      "Cyan",
      "Yellow",
      "Magenta"
    ];

  const getMeasurements = async (model, period) =>
    period ?
      model.variables.ownerId ?
        await GraphQL
          .getDashboardMeasurementsByOwner(
            model.variables.ownerId,
            period)
      : model.variables.ownerUserId ?
        await GraphQL
          .getDashboardMeasurementsByOwnerUser(
            model.variables.ownerUserId,
            period)
      : null
    : GraphQL
        .normalizeMultiDashboardMeasurements(
          model.result);

  const updatePeriod = (model, period) =>
    period ?
      {
        from: period.to,
        to: luxon.DateTime.now()
      }
    : {
        from: GraphQL.deserializeDateTime(model.variables.period.to),
        to: luxon.DateTime.now()
      };

  const createOrUpdateCharts = (measurements, max, culture, charts) =>
    charts ?
      updateCharts(
        measurements,
        max,
        culture,
        charts)
    : createCharts(
        measurements,
        createRainbow(measurements, max, culture),
        max,
        culture);

  const update = async ({model, max, culture, charts, period}) =>
    ({
      charts: createOrUpdateCharts(
        await getMeasurements(model, period),
        max,
        culture,
        charts),
      period: updatePeriod(model, period)
    });

  const shouldUpdate = (model) =>
    GraphQL
      .deserializeDateTime(model.variables.period.to)
      .diff(GraphQL
        .deserializeDateTime(model.variables.period.from),
        'minutes').minutes <= 60;

  const intervalNow = (callback, timeout) => {
    callback();
    setInterval(callback, timeout);
  }

  window.onload = () => {
    const modelString = '@Html.Raw(Json.Serialize(Model))';
    const model = JSON.parse(modelString);

    const maxString = `{
      "power": @IDashboardMeasurementProvider.MaxPower,
      "current": @IDashboardMeasurementProvider.MaxCurrent,
      "voltage": @IDashboardMeasurementProvider.MaxVoltage
    }`;
    const max = JSON.parse(maxString);

    const culture = '@Html.Raw(Orchard.CultureName())';

    const paramsString = `@(Html.Raw(Json.Serialize(
      new
      {
        IsDev = Env.IsDevelopment(),
      })))`;
    const params = JSON.parse(paramsString);
    // TODO: tune this
    const timeout = params.isDev ? 1000 : 10000;

    let period = null;
    let charts = null;
    const callback = async () => {
      const updated = await update({
        model,
        max,
        culture,
        charts,
        period,
      });
      period = updated.period;
      charts = updated.charts;
      // TODO: tune this
    };
    callback();

    if (shouldUpdate(model)) {
      setInterval(callback, timeout);
    }
  };
</script>
<script asp-name="ozdstheme-luxon" at="Head"></script>
<script asp-name="ozdstheme-chart" at="Head"></script>
<script asp-name="ozdstheme-graphql" at="Head"></script>