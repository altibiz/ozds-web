@using Ozds.Modules.Ozds
@using Ozds.Elasticsearch
@using Ozds.Extensions

@inject IDashboardMeasurementProvider Provider

@model SecondarySiteType

<partial name="DashboardButtons" />

@{
  var now = DateTime.UtcNow;

  var fromQuery = Context.Request.Query["from"].FirstOrDefault();
  var from =
    string.IsNullOrEmpty(fromQuery) ? now.AddMinutes(-60)
    : fromQuery.ToUtcIsoDateTime();

  var toQuery = Context.Request.Query["to"].FirstOrDefault();
  var to =
    string.IsNullOrEmpty(toQuery) ? now
    : toQuery.ToUtcIsoDateTime();

  var deviceId = Model.Site.Value.DeviceId;
  var period =
    new Period
    {
      From = from,
      To = to,
    };

  var measurements = await Provider
    .GetDashboardMeasurementsByDeviceAsync(
      deviceId,
      period);

  var initialQuery =
    new InitialQuery<IEnumerable<DashboardMeasurement>>
    {
      Variables =
        new
        {
          DeviceId = deviceId,
          Period = period,
        },
      Result = measurements,
    };
}

<partial name="Dashboard" model="@initialQuery" />