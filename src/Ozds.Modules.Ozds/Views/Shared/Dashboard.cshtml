@using Microsoft.Extensions.Hosting
@using Ozds.Elasticsearch
@using Ozds.Extensions
@using Ozds.Modules.Ozds

@model InitialQuery<IEnumerable<DashboardMeasurement>>

@inject IHostEnvironment Env

@if (Model.Result.EmptyEnumerable())
{
  <span>
    @(T["No measurements available"].Value)
  </span>
  return;
}

<div class="d-flex flex-column flex-lg-row justify-content-between mt-2">
  <h5>
    @T["Period"]
  </h5>
  <div class="d-flex flex-column flex-md-row">
    <span id="period-from-value">
      @Model.Variables.Period.From.ToString()
    </span>
    <span class="d-none d-md-block">&nbsp;-&nbsp;</span>
    <span id="period-to-value">
      @Model.Variables.Period.To.ToString()
    </span>
  </div>
</div>

<div class="d-flex flex-column mt-5">
  <h5>
    @T["Cumulative"]
  </h5>
  <div class="d-flex flex-column flex-lg-row w-100">
    <div class="d-flex flex-column align-items-center h-100">
      <div
          class="
            d-block justify-content-center
            position-relative flex-shrink-1">
        <canvas id="cumulative-doughnut" />
      </div>
      <div style="margin-top: -50px;">
        <div>
          <strong style="color: Red;">
            @T["Power"] (kW)
          </strong>
          <span id="power-value">
            @decimal.Round(Model.Result.Last().Data.Power, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxPower
          </span>
        </div>
        <div>
          <strong style="color: Blue;">
            @T["Energy"] (kWh)
          </strong>
          <span id="energy-value">
            @decimal.Round(Model.Result.Last().Data.Energy, 2)
          </span>
        </div>
      </div>
    </div>
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="cumulative-lines" />
    </div>
  </div>
</div>

<div class="d-flex flex-column mt-5">
  <h5>
    @T["Power phases"]
  </h5>
  <div class="d-flex flex-column flex-lg-row w-100">
    <div class="d-flex flex-column align-items-center h-100">
      <div
          class="
            d-block justify-content-center
            position-relative flex-shrink-1">
        <canvas id="power-doughnut" />
      </div>
      <div style="margin-top: -50px;">
        <div>
          <strong style="color: Red;">
            @T["PowerL1"] (kW)
          </strong>
          <span id="powerL1-value">
            @decimal.Round(Model.Result.Last().Data.PowerL1, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxPower
          </span>
        </div>
        <div>
          <strong style="color: Blue;">
            @T["PowerL2"] (kW)
          </strong>
          <span id="powerL2-value">
            @decimal.Round(Model.Result.Last().Data.PowerL2, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxPower
          </span>
        </div>
        <div>
          <strong style="color: Green;">
            @T["PowerL3"] (kW)
          </strong>
          <span id="powerL3-value">
            @decimal.Round(Model.Result.Last().Data.PowerL3, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxPower
          </span>
        </div>
      </div>
    </div>
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="power-lines" />
    </div>
  </div>
</div>

<div class="d-flex flex-column mt-5">
  <h5>
    @T["Current phases"]
  </h5>
  <div class="d-flex flex-column flex-lg-row w-100">
    <div class="d-flex flex-column align-items-center h-100">
      <div
          class="
            d-block justify-content-center
            position-relative flex-shrink-1">
        <canvas id="current-doughnut" />
      </div>
      <div style="margin-top: -50px;">
        <div>
          <strong style="color: Red;">
            @T["CurrentL1"] (A)
          </strong>
          <span id="currentL1-value">
            @decimal.Round(Model.Result.Last().Data.CurrentL1, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxCurrent
          </span>
        </div>
        <div>
          <strong style="color: Blue;">
            @T["CurrentL2"] (A)
          </strong>
          <span id="currentL2-value">
            @decimal.Round(Model.Result.Last().Data.CurrentL2, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxCurrent
          </span>
        </div>
        <div>
          <strong style="color: Green;">
            @T["CurrentL3"] (A)
          </strong>
          <span id="currentL3-value">
            @decimal.Round(Model.Result.Last().Data.CurrentL3, 2)
          </span>
          <span>
            / @IDashboardMeasurementProvider.MaxCurrent
          </span>
        </div>
      </div>
    </div>
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="current-lines" />
    </div>
  </div>
</div>

<div class="d-flex flex-column mt-5" style="height: 400px;">
  <h5>
    @T["Voltage phases"]
  </h5>
  <div
      class="
        d-block justify-content-center
        position-relative flex-grow-1">
    <canvas id="voltage-lines" />
  </div>
</div>

<script at="Foot">
  // TODO: doughnut data strategy
  const createCharts = (measurements, doughnuts, max, culture) =>
    ({
      measurements,
      doughnuts,
      cumulativeLines: new Chart(
        "cumulative-lines",
        {
          type: "line",
          data: {
            datasets: [
              {
                label: '@T["Energy"].Value (kWh)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.energy"
                },
                yAxisID: "energy",
                borderColor: "Blue",
                backgroundColor: "Blue",
              },
              {
                label: '@T["Power"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.power"
                },
                yAxisID: "power",
                borderColor: "Red",
                backgroundColor: "Red",
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: false
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
              power: {
                type: 'linear',
                display: true,
                position: 'left',
              },
              energy: {
                type: 'linear',
                display: true,
                position: 'right',
                grid: {
                  drawOnChartArea: false,
                },
              },
            },
          },
        }),

      cumulativeDoughnut: new Chart(
        "cumulative-doughnut",
        {
          type: "doughnut",
          data: {
            labels: [ '@T["Power"].Value (kW)' ],
            datasets: [
              {
                label: [ '@T["Current Power"].Value (kW)', '' ],
                data: doughnuts.power,
                backgroundColor: ["Red", "#DDDDDD"]
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            rotation: 270,
            circumference: 180,
            plugins: {
              legend: false
            },
          },
        }),

      powerLines: new Chart(
        "power-lines",
        {
          type: "line",
          data: {
            datasets: [
              {
                label: '@T["PowerL1"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.powerL1"
                },
                yAxisID: "power",
                borderColor: "Red",
                backgroundColor: "Red",
              },
              {
                label: '@T["PowerL2"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.powerL2"
                },
                yAxisID: "power",
                borderColor: "Blue",
                backgroundColor: "Blue",
              },
              {
                label: '@T["PowerL3"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.powerL3"
                },
                yAxisID: "power",
                borderColor: "Green",
                backgroundColor: "Green",
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: false
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
            },
          },
        }),

      powerDoughnut: new Chart(
        "power-doughnut",
        {
          type: "doughnut",
          data: {
            datasets: [
              {
                label: [ '@T["PowerL1"].Value (kW)', '' ],
                data: doughnuts.powerL1,
                backgroundColor: ["Red", "#DDDDDD"]
              },
              {
                label: [ '@T["PowerL2"].Value (kW)', '' ],
                data: doughnuts.powerL2,
                backgroundColor: ["Blue", "#DDDDDD"]
              },
              {
                label: [ '@T["PowerL3"].Value (kW)', '' ],
                data: doughnuts.powerL3,
                backgroundColor: ["Green", "#DDDDDD"]
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            rotation: 270,
            circumference: 180,
            plugins: {
              legend: false
            },
          },
        }),

      currentLines: new Chart(
        "current-lines",
        {
          type: "line",
          data: {
            datasets: [
              {
                label: '@T["CurrentL1"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.currentL1"
                },
                yAxisID: "current",
                borderColor: "Red",
                backgroundColor: "Red",
              },
              {
                label: '@T["CurrentL2"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.currentL2"
                },
                yAxisID: "current",
                borderColor: "Blue",
                backgroundColor: "Blue",
                yAxisID: "current",
              },
              {
                label: '@T["CurrentL3"].Value (kW)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.currentL3"
                },
                yAxisID: "current",
                borderColor: "Green",
                backgroundColor: "Green",
                yAxisID: "current",
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: false
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
            },
          },
        }),

      currentDoughnut: new Chart(
        "current-doughnut",
        {
          type: "doughnut",
          data: {
            datasets: [
              {
                label: [ '@T["CurrentL1"].Value (kW)', '' ],
                data: doughnuts.currentL1,
                backgroundColor: ["Red", "#DDDDDD"]
              },
              {
                label: [ '@T["CurrentL2"].Value (kW)', '' ],
                data: doughnuts.currentL2,
                backgroundColor: ["Blue", "#DDDDDD"]
              },
              {
                label: [ '@T["CurrentL3"].Value (kW)', '' ],
                data: doughnuts.currentL3,
                backgroundColor: ["Green", "#DDDDDD"]
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            rotation: 270,
            circumference: 180,
            plugins: {
              legend: false
            },
          },
        }),

      voltageLines: new Chart(
        "voltage-lines",
        {
          type: "line",
          data: {
            datasets: [
              {
                label: '@T["VoltageL1"].Value (V)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.voltageL1"
                },
                yAxisID: "voltage",
                borderColor: "Red",
                backgroundColor: "Red",
              },
              {
                label: '@T["VoltageL2"].Value (V)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.voltageL2"
                },
                yAxisID: "voltage",
                borderColor: "Blue",
                backgroundColor: "Blue",
              },
              {
                label: '@T["VoltageL3"].Value (V)',
                data: measurements,
                parsing: {
                  xAxisKey: "timestamp",
                  yAxisKey: "data.voltageL3"
                },
                yAxisID: "voltage",
                borderColor: "Green",
                backgroundColor: "Green",
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: true
            },
            scales: {
              x: {
                type: 'time',
                adapters: {
                  date: {
                    locale: culture,
                  },
                },
              },
            },
          },
        }),
    })

  const updateCharts = (measurements, doughnuts, max, culture, charts) => {
    charts.measurements.push(...measurements);
    charts.cumulativeLines.update();
    charts.powerLines.update();
    charts.currentLines.update();
    charts.voltageLines.update();

    Object
      .keys(charts.doughnuts)
      .forEach(key => updateDoughnut(
        charts.doughnuts[key],
        doughnuts[key]));
    charts.cumulativeDoughnut.update();
    charts.powerDoughnut.update();
    charts.currentDoughnut.update();

    return charts;
  };

  const createDoughnut = (value, max) => [value, max - value];
  const updateDoughnut = (doughnut, value) => {
    doughnut[0] = value[0];
    doughnut[1] = value[1];
  };

  const createDoughnuts = (last, max, culture) =>
    ({
      energy: createDoughnut(last.data.energy, max.energy),
      power: createDoughnut(last.data.power, max.power),
      powerL1: createDoughnut(last.data.powerL1, max.power),
      powerL2: createDoughnut(last.data.powerL2, max.power),
      powerL3: createDoughnut(last.data.powerL3, max.power),
      currentL1: createDoughnut(last.data.currentL1, max.current),
      currentL2: createDoughnut(last.data.currentL2, max.current),
      currentL3: createDoughnut(last.data.currentL3, max.current),
      voltageL1: createDoughnut(last.data.voltageL1, max.voltage),
      voltageL2: createDoughnut(last.data.voltageL2, max.voltage),
      voltageL3: createDoughnut(last.data.voltageL3, max.voltage),
    });

  const createOrUpdateCharts = (measurements, period, max, culture, charts) =>
    charts ?
      updateCharts(
        measurements,
        createDoughnuts(last(measurements), max, culture),
        max,
        culture,
        charts)
    : createCharts(
        measurements,
        createDoughnuts(last(measurements), max, culture),
        max,
        culture);

  const createValues = (last, period, max, culture) =>
    ({
      periodFrom: document.getElementById("period-from-value"),
      periodTo: document.getElementById("period-to-value"),

      energy: document.getElementById("energy-value"),
      power: document.getElementById("power-value"),

      powerL1: document.getElementById("powerL1-value"),
      powerL2: document.getElementById("powerL2-value"),
      powerL3: document.getElementById("powerL3-value"),

      currentL1: document.getElementById("currentL1-value"),
      currentL2: document.getElementById("currentL2-value"),
      currentL3: document.getElementById("currentL3-value"),
    });

  const updateValues = (last, period, max, culture, values) => {
    values.periodFrom.innerHTML = period.from
      .toLocal(culture)
      .toLocaleString(luxon.DateTime.DATETIME_SHORT_WITH_SECONDS);
    values.periodTo.innerHTML = period.to
      .toLocal(culture)
      .toLocaleString(luxon.DateTime.DATETIME_SHORT_WITH_SECONDS);

    values.energy.innerHTML = last.data.energy.toFixed(2).toString();
    values.power.innerHTML = last.data.power.toFixed(2).toString();

    values.powerL1.innerHTML = last.data.powerL1.toFixed(2).toString();
    values.powerL2.innerHTML = last.data.powerL2.toFixed(2).toString();
    values.powerL3.innerHTML = last.data.powerL3.toFixed(2).toString();

    values.currentL1.innerHTML = last.data.currentL1.toFixed(2).toString();
    values.currentL2.innerHTML = last.data.currentL2.toFixed(2).toString();
    values.currentL3.innerHTML = last.data.currentL3.toFixed(2).toString();

    return values;
  };

  const createOrUpdateValues = (measurements, period, max, culture, values) =>
    values ?
      updateValues(
        last(measurements),
        period,
        max,
        culture,
        values)
    : createValues(
        last(measurements),
        period,
        max,
        culture);

  const getMeasurements = async (model, period) =>
    period ?
      await GraphQL
        .getDashboardMeasurementsByDevice(
          model.variables.deviceId,
          period)
    : GraphQL
        .normalizeDashboardMeasurements(
          model.result);

  const updatePeriod = (model, period) =>
    period ?
      {
        from: period.to,
        to: luxon.DateTime.now()
      }
    : {
        from: GraphQL.deserializeDateTime(model.variables.period.to),
        to: luxon.DateTime.now()
      };

  const update = async ({model, period, max, culture, charts, values}) => {
    const measurements = await getMeasurements(model, period);

    return {
      charts: createOrUpdateCharts(measurements, period, max, culture, charts),
      values: createOrUpdateValues(measurements, period, max, culture, values),
      period: updatePeriod(model, period)
    };
  };

  const intervalNow = (callback, timeout) => {
    callback();
    return setInterval(callback, timeout);
  }

  const shouldUpdate = (model) =>
    GraphQL
      .deserializeDateTime(model.variables.period.to)
      .diff(GraphQL
        .deserializeDateTime(model.variables.period.from),
        'minutes').minutes <= 60;

  window.onload = () => {
    const modelString = '@Html.Raw(Json.Serialize(Model))';
    const model = JSON.parse(modelString);

    const maxString = `{
      "power": @IDashboardMeasurementProvider.MaxPower,
      "current": @IDashboardMeasurementProvider.MaxCurrent,
      "voltage": @IDashboardMeasurementProvider.MaxVoltage
    }`;
    const max = JSON.parse(maxString);

    const culture = '@Html.Raw(Orchard.CultureName())';

    const paramsString = `@(Html.Raw(Json.Serialize(
      new
      {
        IsDev = Env.IsDevelopment(),
      })))`;
    const params = JSON.parse(paramsString);
    // TODO: tune this
    const timeout = params.isDev ? 1000 : 10000;

    let period = null;
    let charts = null;
    let values = null;
    const callback = async () => {
      const updated = await update({
          model,
          period,
          max,
          culture,
          charts,
          values
        });
      period = updated.period;
      charts = updated.charts;
      values = updated.values;
    };
    callback();

    if (shouldUpdate(model)) {
      setInterval(callback, timeout);
    }
  }

  const last = (array) => array[array.length - 1];
</script>
<script asp-name="ozdstheme-luxon" at="Head"></script>
<script asp-name="ozdstheme-chart" at="Head"></script>
<script asp-name="ozdstheme-graphql" at="Head"></script>