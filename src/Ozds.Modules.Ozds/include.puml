@startuml
interface IClientPrototype {
    + ClonePrototype(indexSuffix:string?) : IClient
}
class Client <<sealed>> <<partial>> {
    + Client(env:IHostEnvironment, logger:ILogger<IClient>, conf:IConfiguration, providers:IEnumerable<IMeasurementProvider>)
    + {static} Ping(env:IHostEnvironment, conf:IConfiguration) : bool
    - {static} CreateElasticClient(env:IHostEnvironment, conf:IConfiguration) : IElasticClient
    + ClonePrototype(indexSuffix:string?) : IClient
    - Client(other:Client, indexSuffix:string?)
    - IndexSuffix : string <<get>> <<init>>
    - ConsoleIndexSuffix : string <<get>>
    - _indexSuffix : string = ""
    - TryReconstructIndices() : void
    - TryDeleteIndices() : void
    - TryCreateIndices() : void
    - MeasurementIndexName : string <<get>>
    - DeviceIndexName : string <<get>>
    - LogIndexName : string <<get>>
    - EnvIndexPrefix : string <<get>>
}
class "List`1"<T> {
}
IClientPrototype <|-- Client
IClient <|-- Client
Client --> "Env" IHostEnvironment
Client --> "Logger" ILogger
Client --> "Elasticsearch" IElasticClient
Client --> "Providers<IMeasurementProvider>" "List`1"
interface IClient <<partial>> {
    + <<const>> MaxSize : int = 10000
}
class EnvironmentExtensions <<static>> {
    + {static} AssertEnvironmentVariable(key:string) : string
}
class EnvironmentVariableNotFoundException {
    + EnvironmentVariableNotFoundException(message:string)
}
SystemException <|-- EnvironmentVariableNotFoundException
class IConfigurationSectionExtensions <<static>> {
    + {static} GetNonNullValue(section:IConfigurationSection, key:string) : T
}
class Period {
    + {static} UntilNow(from:DateTime) : Period
    + {static} Encompassing(events:IEnumerable<DateTime>) : Period
    + {static} LooselyEncompassing(events:IEnumerable<DateTime>) : Period
    + Interpolate(begin:decimal, end:decimal, at:DateTime) : decimal
    + LimitFrom(span:TimeSpan) : Period
    + LimitTo(span:TimeSpan) : Period
    + SplitAscending(times:int) : IEnumerable<Period>
    + SplitAscending(span:TimeSpan) : IEnumerable<Period>
    + SplitDescending(times:int) : IEnumerable<Period>
    + SplitDescending(span:TimeSpan) : IEnumerable<Period>
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:Period?) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    + CompareTo(other:Period?) : int
    + Deconstruct(from:DateTime, to:DateTime) : void
    + Clone() : object
    + ClonePeriod() : Period
}
class PeriodExtensions <<static>> {
    + {static} UntilNow(@this:DateTime) : Period
}
class "IEquatable`1"<T> {
}
class "IComparable`1"<T> {
}
"IEquatable`1" "<Period>" <|-- Period
"IComparable`1" "<Period>" <|-- Period
ICloneable <|-- Period
Period o-> "From" DateTime
Period o-> "To" DateTime
Period --> "Span" TimeSpan
Period --> "HalfPoint" DateTime
interface "IAsyncExtractionBucket`1"<T> {
    + Error : string? <<get>>
    + Deconstruct(period:Period, error:string?, items:IAsyncEnumerable<T>) : void
}
class "AsyncExtractionBucket`1"<T> {
    + AsyncExtractionBucket(period:Period, items:IAsyncEnumerable<T>)
    + AsyncExtractionBucket(period:Period, error:string)
    + Error : string? <<get>> = default
    GetAsyncEnumerator(cancellationToken:CancellationToken) : IAsyncEnumerator<T>
}
class "IAsyncEnumerable`1"<T> {
}
"IAsyncEnumerable`1" "<T>" <|-- "IAsyncExtractionBucket`1"
"IAsyncExtractionBucket`1" --> "Period" Period
"IAsyncExtractionBucket`1" "<T>" <|-- "AsyncExtractionBucket`1"
"AsyncExtractionBucket`1" --> "Period" Period
"AsyncExtractionBucket`1" o-> "Items<T>" "IAsyncEnumerable`1"
interface "IExtractionBucket`1"<T> {
    + Error : string? <<get>>
    + Deconstruct(period:Period, error:string?, items:IEnumerable<T>) : void
}
class "ExtractionBucket`1"<T> {
    + ExtractionBucket(period:Period, items:IEnumerable<T>)
    + ExtractionBucket(period:Period, error:string)
    + Error : string? <<get>> = default
    GetEnumerator() : IEnumerator<T>
    GetEnumerator() : IEnumerator
}
class "IEnumerable`1"<T> {
}
"IEnumerable`1" "<T>" <|-- "IExtractionBucket`1"
"IExtractionBucket`1" --> "Period" Period
"IExtractionBucket`1" "<T>" <|-- "ExtractionBucket`1"
"ExtractionBucket`1" --> "Period" Period
"ExtractionBucket`1" o-> "Items<T>" "IEnumerable`1"
class IBulkResponseItemBaseExtensions <<static>> {
    + {static} Ids(items:IEnumerable<BulkResponseItemBase>) : IEnumerable<Id>
}
class ISearchResponseExtensions <<static>> {
    + {static} Sources(response:ISearchResponse<T>) : IEnumerable<T>
    + {static} Ids(response:ISearchResponse<T>) : IEnumerable<string>
    + {static} FirstOrDefault(response:ISearchResponse<T>) : T?
}
class IdExtensions <<static>> {
    + {static} ToStrings(ids:IEnumerable<Id>) : IEnumerable<string>
    + {static} ToIds(strings:IEnumerable<string>) : IEnumerable<Id>
}
interface IClient <<partial>> {
    + DeleteDeviceAsync(id:Id) : Task<DeleteResponse>
    + DeleteDevice(id:Id) : DeleteResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteDeviceAsync(id:Id) : Task<DeleteResponse>
    + DeleteDevice(id:Id) : DeleteResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + DeleteDevicesAsync(deviceIds:IEnumerable<Id>) : Task<BulkResponse>
    + DeleteDevices(deviceIds:IEnumerable<Id>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteDevicesAsync(deviceIds:IEnumerable<Id>) : Task<BulkResponse>
    + DeleteDevices(deviceIds:IEnumerable<Id>) : BulkResponse
}
IClient <|-- Client
class DeviceState {
    + <<const>> Added : string = "added"
    + <<const>> Active : string = "healthy"
    + <<const>> TemporarilyInactive : string = "unhealthy"
    + <<const>> Inactive : string = "inactive"
    + <<const>> Removed : string = "removed"
}
class Device {
    + {static} MakeId(source:string, sourceDeviceId:string) : string
    + Device(source:string, sourceDeviceId:string, sourceDeviceData:SourceDeviceDataType?, owner:OwnerDataType, measurement:MeasurementDataType, state:StateDataType?)
    + Id : string <<get>> <<init>>
    + Source : string <<get>> <<init>>
    + SourceDeviceId : string <<get>> <<init>>
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:Device?) : bool
    + <<override>> GetHashCode() : int
    + Clone() : object
    + CloneDevice() : Device
}
class "IEquatable`1"<T> {
}
class SourceDeviceDataType {
    + OwnerId : string? <<get>> <<init>> = default
}
class OwnerDataType {
    + OwnerDataType(@operator:string, centerId:string, centerUserId:string?, ownerId:string, ownerUserId:string?)
    + Operator : string <<get>> <<init>>
    + CenterId : string <<get>> <<init>>
    + CenterUserId : string? <<get>> <<init>>
    + OwnerId : string <<get>> <<init>>
    + OwnerUserId : string? <<get>> <<init>>
}
class MeasurementDataType {
    + MeasurementDataType(measurementIntervalInSeconds:int, extractionStart:DateTime, extractionOffsetInSeconds:int, extractionRetries:int, extractionTimeoutInSeconds:int, validationIntervalInSeconds:int, lastValidation:DateTime?)
    + MeasurementIntervalInSeconds : int <<get>> <<init>>
    + ExtractionOffsetInSeconds : int <<get>> <<init>>
    + ExtractionRetries : int <<get>> <<init>>
    + ExtractionTimeoutInSeconds : int <<get>> <<init>>
    + ValidationIntervalInSeconds : int <<get>> <<init>>
}
class StateDataType {
    + StateDataType(state:string?, dateAdded:DateTime?, dateRemoved:DateTime?)
    + State : string <<get>> <<init>>
    + DateRemoved : DateTime? <<get>> <<init>> = null
}
"IEquatable`1" "<Device>" <|-- Device
ICloneable <|-- Device
Device o-> "SourceDeviceData" SourceDeviceDataType
Device --> "OwnerData" OwnerDataType
Device --> "MeasurementData" MeasurementDataType
Device --> "StateData" StateDataType
Device +-- SourceDeviceDataType
Device +-- OwnerDataType
Device +-- MeasurementDataType
MeasurementDataType --> "ExtractionStart" DateTime
MeasurementDataType --> "LastValidation" DateTime
Device +-- StateDataType
StateDataType o-> "DateAdded" DateTime
interface IClient <<partial>> {
    + GetDevice(id:Id) : GetResponse<Device>
    + GetDeviceAsync(id:Id) : Task<GetResponse<Device>>
}
class Client <<sealed>> <<partial>> {
    + GetDevice(id:Id) : GetResponse<Device>
    + GetDeviceAsync(id:Id) : Task<GetResponse<Device>>
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexDeviceAsync(device:Device) : Task<IndexResponse>
    + IndexDevice(device:Device) : IndexResponse
}
class Client <<sealed>> <<partial>> {
    + IndexDeviceAsync(device:Device) : Task<IndexResponse>
    + IndexDevice(device:Device) : IndexResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexDevicesAsync(devices:IEnumerable<Device>) : Task<BulkResponse>
    + IndexDevices(devices:IEnumerable<Device>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + IndexDevicesAsync(devices:IEnumerable<Device>) : Task<BulkResponse>
    + IndexDevices(devices:IEnumerable<Device>) : BulkResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + UpdateDeviceLastValidationAsync(deviceId:Id, lastValidation:DateTime) : Task<UpdateResponse<Device>>
    + UpdateDeviceLastValidation(deviceId:Id, lastValidation:DateTime) : UpdateResponse<Device>
}
class Client <<sealed>> <<partial>> {
    + UpdateDeviceLastValidationAsync(deviceId:Id, lastValidation:DateTime) : Task<UpdateResponse<Device>>
    + UpdateDeviceLastValidation(deviceId:Id, lastValidation:DateTime) : UpdateResponse<Device>
}
class DeviceLastValidationUpdatePartial {
    + DeviceLastValidationUpdatePartial(lastValidation:DateTime)
}
class MeasurementDataPartial {
}
IClient <|-- Client
DeviceLastValidationUpdatePartial --> "MeasurementData" MeasurementDataPartial
DeviceLastValidationUpdatePartial +-- MeasurementDataPartial
MeasurementDataPartial o-> "LastValidation" DateTime
interface IClient <<partial>> {
    + UpdateDeviceStateAsync(deviceId:Id, state:string, dateRemoved:DateTime?) : Task<UpdateResponse<Device>>
    + UpdateDeviceState(deviceId:Id, state:string, dateRemoved:DateTime?) : UpdateResponse<Device>
}
class Client <<sealed>> <<partial>> {
    + UpdateDeviceStateAsync(deviceId:Id, state:string, dateRemoved:DateTime?) : Task<UpdateResponse<Device>>
    + UpdateDeviceState(deviceId:Id, state:string, dateRemoved:DateTime?) : UpdateResponse<Device>
}
class DeviceStateUpdatePartial {
    + DeviceStateUpdatePartial(state:string, dateRemoved:DateTime?)
}
class StateDataPartial {
    + State : string <<get>> <<init>>
    + DateRemoved : DateTime? <<get>> <<init>>
}
IClient <|-- Client
DeviceStateUpdatePartial --> "StateData" StateDataPartial
DeviceStateUpdatePartial +-- StateDataPartial
interface IClient <<partial>> {
    + SearchDevicesAsync(all:bool) : Task<ISearchResponse<Device>>
    + SearchDevices(all:bool) : ISearchResponse<Device>
    + SearchDevicesBySourceAsync(source:string, all:bool) : Task<ISearchResponse<Device>>
    + SearchDevicesBySource(source:string, all:bool) : ISearchResponse<Device>
}
class Client <<sealed>> <<partial>> {
    + SearchDevices(all:bool) : ISearchResponse<Device>
    + SearchDevicesAsync(all:bool) : Task<ISearchResponse<Device>>
    + SearchDevicesBySource(source:string, all:bool) : ISearchResponse<Device>
    + SearchDevicesBySourceAsync(source:string, all:bool) : Task<ISearchResponse<Device>>
}
IClient <|-- Client
interface IClient <<partial>> {
    + DeleteLoadLogAsync(id:Id) : Task<DeleteResponse>
    + DeleteLoadLog(id:Id) : DeleteResponse
    + DeleteMissingDataLogAsync(id:Id) : Task<DeleteResponse>
    + DeleteMissingDataLog(id:Id) : DeleteResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteLoadLogAsync(id:Id) : Task<DeleteResponse>
    + DeleteLoadLog(id:Id) : DeleteResponse
    + DeleteMissingDataLogAsync(id:Id) : Task<DeleteResponse>
    + DeleteMissingDataLog(id:Id) : DeleteResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + DeleteLogsAsync(logIds:IEnumerable<Id>) : Task<BulkResponse>
    + DeleteLogs(logIds:IEnumerable<Id>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteLogsAsync(logIds:IEnumerable<Id>) : Task<BulkResponse>
    + DeleteLogs(logIds:IEnumerable<Id>) : BulkResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + ExtendLoadLogPeriodAsync(id:Id, to:DateTime) : Task<UpdateResponse<LoadLog>>
    + ExtendLoadLogPeriod(id:Id, to:DateTime) : UpdateResponse<LoadLog>
}
class Client <<sealed>> <<partial>> {
    + ExtendLoadLogPeriodAsync(id:Id, to:DateTime) : Task<UpdateResponse<LoadLog>>
    + ExtendLoadLogPeriod(id:Id, to:DateTime) : UpdateResponse<LoadLog>
}
class ExtendLogPeriodPartial {
    + ExtendLogPeriodPartial(to:DateTime)
}
class PeriodPartial {
}
IClient <|-- Client
ExtendLogPeriodPartial --> "Period" PeriodPartial
ExtendLogPeriodPartial +-- PeriodPartial
PeriodPartial --> "To" DateTime
interface IClient <<partial>> {
    + GetLoadLogAsync(id:Id) : Task<GetResponse<LoadLog>>
    + GetLoadLog(id:Id) : GetResponse<LoadLog>
    + GetMissingDataLogAsync(id:Id) : Task<GetResponse<MissingDataLog>>
    + GetMissingDataLog(id:Id) : GetResponse<MissingDataLog>
}
class Client <<sealed>> <<partial>> {
    + GetLoadLogAsync(id:Id) : Task<GetResponse<LoadLog>>
    + GetLoadLog(id:Id) : GetResponse<LoadLog>
    + GetMissingDataLogAsync(id:Id) : Task<GetResponse<MissingDataLog>>
    + GetMissingDataLog(id:Id) : GetResponse<MissingDataLog>
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexLoadLogAsync(log:LoadLog) : Task<IndexResponse>
    + IndexLoadLog(log:LoadLog) : IndexResponse
    + IndexMissingDataLogAsync(log:MissingDataLog) : Task<IndexResponse>
    + IndexMissingDataLog(log:MissingDataLog) : IndexResponse
}
class Client <<sealed>> <<partial>> {
    + IndexLoadLogAsync(log:LoadLog) : Task<IndexResponse>
    + IndexLoadLog(log:LoadLog) : IndexResponse
    + IndexMissingDataLogAsync(log:MissingDataLog) : Task<IndexResponse>
    + IndexMissingDataLog(log:MissingDataLog) : IndexResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexLoadLogsAsync(logs:IEnumerable<LoadLog>) : Task<BulkResponse>
    + IndexLoadLogs(logs:IEnumerable<LoadLog>) : BulkResponse
    + IndexMissingDataLogsAsync(logs:IEnumerable<MissingDataLog>) : Task<BulkResponse>
    + IndexMissingDataLogs(logs:IEnumerable<MissingDataLog>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + IndexLoadLogsAsync(logs:IEnumerable<LoadLog>) : Task<BulkResponse>
    + IndexLoadLogs(logs:IEnumerable<LoadLog>) : BulkResponse
    + IndexMissingDataLogsAsync(logs:IEnumerable<MissingDataLog>) : Task<BulkResponse>
    + IndexMissingDataLogs(logs:IEnumerable<MissingDataLog>) : BulkResponse
}
IClient <|-- Client
class LoadLog {
    + <<const>> Type : string = "load"
    + {static} MakeId(resource:string) : string
    + LoadLog(resource:string, period:Period)
    + Id : string <<get>> <<init>>
    + Resource : string <<get>> <<init>>
    + LogType : string <<get>> <<init>>
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:LoadLog?) : bool
    + <<override>> GetHashCode() : int
    + Deconstruct(id:string, resource:string, period:Period) : void
    + Clone() : object
    + CloneLoadLog() : LoadLog
}
class "IEquatable`1"<T> {
}
"IEquatable`1" "<LoadLog>" <|-- LoadLog
ICloneable <|-- LoadLog
LoadLog --> "Period" Period
class MissingDataLog {
    + <<const>> Type : string = "missingData"
    + {static} MakeId(resource:string, period:Period) : string
    + MissingDataLog(resource:string, period:Period, nextExtraction:DateTime, retries:int, shouldValidate:bool, error:string)
    + Id : string <<get>> <<init>>
    + Resource : string <<get>> <<init>>
    + Retries : int <<get>> <<init>>
    + ShouldValidate : bool <<get>> <<init>>
    + Error : string <<get>> <<init>>
    + LogType : string <<get>> <<init>>
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:MissingDataLog?) : bool
    + <<override>> GetHashCode() : int
    + Deconstruct(id:string, resource:string, period:Period) : void
    + Clone() : object
    + CloneMissingDataLog() : MissingDataLog
}
class "IEquatable`1"<T> {
}
"IEquatable`1" "<MissingDataLog>" <|-- MissingDataLog
ICloneable <|-- MissingDataLog
MissingDataLog --> "Period" Period
MissingDataLog --> "NextExtraction" DateTime
interface IClient <<partial>> {
    + SearchLoadLogsAsync(resource:string, size:int?) : Task<ISearchResponse<LoadLog>>
    + SearchLoadLogs(resource:string, size:int?) : ISearchResponse<LoadLog>
    + SearchLoadLogsSortedByPeriodAsync(resource:string, size:int?, period:Period?) : Task<ISearchResponse<LoadLog>>
    + SearchLoadLogsSortedByPeriod(resource:string, size:int?, period:Period?) : ISearchResponse<LoadLog>
    + SearchMissingDataLogsAsync(resource:string, size:int?) : Task<ISearchResponse<MissingDataLog>>
    + SearchMissingDataLogs(resource:string, size:int?) : ISearchResponse<MissingDataLog>
    + SearchMissingDataLogsSortedByPeriodAsync(resource:string, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
    + SearchMissingDataLogsSortedByPeriod(resource:string, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
    + SearchExtractionMissingDataLogsAsync(resource:string, due:DateTime, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
    + SearchExtractionMissingDataLogs(resource:string, due:DateTime, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
    + SearchExtractionMissingDataLogsAsync(resource:string, due:DateTime, retries:int, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
    + SearchExtractionMissingDataLogs(resource:string, due:DateTime, retries:int, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
}
class Client <<sealed>> <<partial>> {
    + SearchLoadLogsAsync(resource:string, size:int?) : Task<ISearchResponse<LoadLog>>
    + SearchLoadLogs(resource:string, size:int?) : ISearchResponse<LoadLog>
    + SearchLoadLogsSortedByPeriod(resource:string, size:int?, period:Period?) : ISearchResponse<LoadLog>
    + SearchLoadLogsSortedByPeriodAsync(resource:string, size:int?, period:Period?) : Task<ISearchResponse<LoadLog>>
    + SearchMissingDataLogsAsync(resource:string, size:int?) : Task<ISearchResponse<MissingDataLog>>
    + SearchMissingDataLogs(resource:string, size:int?) : ISearchResponse<MissingDataLog>
    + SearchMissingDataLogsSortedByPeriod(resource:string, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
    + SearchMissingDataLogsSortedByPeriodAsync(resource:string, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
    + SearchExtractionMissingDataLogs(resource:string, due:DateTime, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
    + SearchExtractionMissingDataLogsAsync(resource:string, due:DateTime, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
    + SearchExtractionMissingDataLogs(resource:string, due:DateTime, retries:int, size:int?, period:Period?) : ISearchResponse<MissingDataLog>
    + SearchExtractionMissingDataLogsAsync(resource:string, due:DateTime, retries:int, size:int?, period:Period?) : Task<ISearchResponse<MissingDataLog>>
}
IClient <|-- Client
interface IClient <<partial>> {
    + DeleteMeasurementAsync(id:Id) : Task<DeleteResponse>
    + DeleteMeasurement(id:Id) : DeleteResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteMeasurementAsync(id:Id) : Task<DeleteResponse>
    + DeleteMeasurement(id:Id) : DeleteResponse
}
IClient <|-- Client
interface IClient <<partial>> {
    + DeleteMeasurementsAsync(measurementIds:IEnumerable<Id>) : Task<BulkResponse>
    + DeleteMeasurements(measurementIds:IEnumerable<Id>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + DeleteMeasurements(measurementIds:IEnumerable<Id>) : BulkResponse
    + DeleteMeasurementsAsync(measurementIds:IEnumerable<Id>) : Task<BulkResponse>
}
IClient <|-- Client
interface IClient <<partial>> {
    + GetMeasurementAsync(id:Id) : Task<GetResponse<Measurement>>
    + GetMeasurement(id:Id) : GetResponse<Measurement>
}
class Client <<sealed>> <<partial>> {
    + GetMeasurementAsync(id:Id) : Task<GetResponse<Measurement>>
    + GetMeasurement(id:Id) : GetResponse<Measurement>
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexMeasurementAsync(measurement:Measurement) : Task<IndexResponse>
    + IndexMeasurement(measurement:Measurement) : IndexResponse
}
class Client <<sealed>> <<partial>> {
    + IndexMeasurement(measurement:Measurement) : IndexResponse
    + IndexMeasurementAsync(measurement:Measurement) : Task<IndexResponse>
}
IClient <|-- Client
interface IClient <<partial>> {
    + IndexMeasurementsAsync(measurements:IEnumerable<Measurement>) : Task<BulkResponse>
    + IndexMeasurements(measurements:IEnumerable<Measurement>) : BulkResponse
}
class Client <<sealed>> <<partial>> {
    + IndexMeasurementsAsync(measurements:IEnumerable<Measurement>) : Task<BulkResponse>
    + IndexMeasurements(measurements:IEnumerable<Measurement>) : BulkResponse
}
IClient <|-- Client
class Measurement {
    + {static} MakeId(deviceId:string, measurementTimestamp:DateTime) : string
    + Measurement(timestamp:DateTime, device:DeviceDataType, measurement:MeasurementDataType, geo:GeoCoordinate?)
    + Id : string <<get>> <<init>>
    + Geo : GeoCoordinate? <<get>> <<init>> = null
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:Measurement?) : bool
    + <<override>> GetHashCode() : int
    + Deconstruct(id:string, timestamp:DateTime, geo:GeoCoordinate?, device:DeviceDataType, measurement:MeasurementDataType) : void
    + Clone() : object
    + CloneMeasurement(timestamp:DateTime?) : Measurement
}
class "IEquatable`1"<T> {
}
class DeviceDataType {
    + DeviceDataType(source:string, deviceId:string, @operator:string, centerId:string, centerUserId:string?, ownerId:string, ownerUserId:string?)
    + Source : string <<get>> <<init>>
    + DeviceId : string <<get>> <<init>>
    + Operator : string <<get>> <<init>>
    + CenterId : string <<get>> <<init>>
    + CenterUserId : string? <<get>> <<init>>
    + OwnerId : string <<get>> <<init>>
    + OwnerUserId : string? <<get>> <<init>>
}
class MeasurementDataType {
    + energyIn : decimal <<get>> <<init>>
    + energyIn_T1 : decimal <<get>> <<init>>
    + energyIn_T2 : decimal <<get>> <<init>>
    + powerIn : decimal <<get>> <<init>>
    + dongleId : string? <<get>> <<init>>
    + meterIdent : string? <<get>> <<init>>
    + meterSerial : string? <<get>> <<init>>
    + localTime : string? <<get>> <<init>>
    + localDate : string? <<get>> <<init>>
    + tariff : int? <<get>> <<init>>
    + limiter : int? <<get>> <<init>>
    + fuseSupervisionL1 : int? <<get>> <<init>>
    + disconnectControl : int? <<get>> <<init>>
    + numLongPwrFailures : int? <<get>> <<init>>
    + numPwrFailures : int? <<get>> <<init>>
    + numVoltageSagsL1 : int? <<get>> <<init>>
    + numVoltageSagsL2 : int? <<get>> <<init>>
    + numVoltageSagsL3 : int? <<get>> <<init>>
    + numVoltageSwellsL1 : int? <<get>> <<init>>
    + numVoltageSwellsL2 : int? <<get>> <<init>>
    + numVoltageSwellsL3 : int? <<get>> <<init>>
    + currentL1 : decimal? <<get>> <<init>>
    + currentL2 : decimal? <<get>> <<init>>
    + currentL3 : decimal? <<get>> <<init>>
    + energyOut : decimal? <<get>> <<init>>
    + energyOut_T1 : decimal? <<get>> <<init>>
    + energyOut_T2 : decimal? <<get>> <<init>>
    + powerInL1 : decimal? <<get>> <<init>>
    + powerInL2 : decimal? <<get>> <<init>>
    + powerInL3 : decimal? <<get>> <<init>>
    + powerOut : decimal? <<get>> <<init>>
    + powerOutL1 : decimal? <<get>> <<init>>
    + powerOutL2 : decimal? <<get>> <<init>>
    + powerOutL3 : decimal? <<get>> <<init>>
    + voltageL1 : decimal? <<get>> <<init>>
    + voltageL2 : decimal? <<get>> <<init>>
    + voltageL3 : decimal? <<get>> <<init>>
}
ICloneable <|-- Measurement
"IEquatable`1" "<Measurement>" <|-- Measurement
Measurement --> "Timestamp" DateTime
Measurement --> "DeviceData" DeviceDataType
Measurement o-> "MeasurementData" MeasurementDataType
Measurement +-- DeviceDataType
Measurement +-- MeasurementDataType
interface IClient <<partial>> {
    + SearchMeasurementsAsync(period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurements(period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsSortedAsync(period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsSorted(period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByDeviceAsync(deviceId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByDevice(deviceId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByDeviceSortedAsync(deviceId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByDeviceSorted(deviceId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerAsync(ownerId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwner(ownerId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerSortedAsync(ownerId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerSorted(ownerId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerUserAsync(ownerUserId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerUser(ownerUserId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerUserSortedAsync(ownerUserId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerUserSorted(ownerUserId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
}
class Client <<sealed>> <<partial>> {
    + SearchMeasurementsAsync(period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurements(period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsSortedAsync(period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsSorted(period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByDeviceAsync(deviceId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByDevice(deviceId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByDeviceSortedAsync(deviceId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByDeviceSorted(deviceId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerAsync(ownerId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwner(ownerId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerSortedAsync(ownerId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerSorted(ownerId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerUserAsync(ownerUserId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerUser(ownerUserId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
    + SearchMeasurementsByOwnerUserSortedAsync(ownerUserId:string, period:Period?, size:int?) : Task<ISearchResponse<Measurement>>
    + SearchMeasurementsByOwnerUserSorted(ownerUserId:string, period:Period?, size:int?) : ISearchResponse<Measurement>
}
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + ExtractDeviceMeasurementsAsync(device:ExtractionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractDeviceMeasurements(device:ExtractionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + ExtractMeasurementsAsync(period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractMeasurements(period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + ExtractSourceMeasurementsAsync(source:string, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractSourceMeasurements(source:string, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
class ExtractionDevice <<struct>> {
}
class ExtractionDeviceSourceData <<struct>> {
}
class ExtractionDeviceExtensions <<static>> {
    + {static} ToExtractionDevice(device:Device) : ExtractionDevice
}
class ExtractionMeasurement <<struct>> {
}
class ExtractionMeasurementGeo <<struct>> {
}
class ExtractionMeasurementData <<struct>> {
}
class ExtractionMeasurementExtensions <<static>> {
    + {static} Validate(measurement:ExtractionMeasurement) : bool
}
class ExtractionPlan <<struct>> {
}
class ExtractionPlanItem <<struct>> {
}
class ExtractionPlanItemExtensions <<static>> {
    + {static} ToMissingDataLogFor(item:ExtractionPlanItem, device:ExtractionDevice) : MissingDataLog
}
class "IEnumerable`1"<T> {
}
class FakeMeasurementExtractor {
    + ExecuteExtractionPlanAsync(plan:ExtractionPlan) : AsyncMeasurementExtraction
    + ExecuteExtractionPlan(plan:ExtractionPlan) : MeasurementExtraction
    + PlanExtractionAsync(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanExtraction(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
    + PlanSourceExtractionAsync(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanSourceExtraction(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
    + PlanDeviceExtractionAsync(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : Task<ExtractionPlan>
    + PlanDeviceExtraction(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : ExtractionPlan
    + ExtractMeasurementsAsync(period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractMeasurements(period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractSourceMeasurementsAsync(source:string, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractSourceMeasurements(source:string, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractDeviceMeasurementsAsync(device:ExtractionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractDeviceMeasurements(device:ExtractionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementExtractor <|-- FakeMeasurementExtractor
class AsyncMeasurementExtraction <<struct>> {
}
class MeasurementExtraction <<struct>> {
}
class MeasurementExtractionItem <<struct>> {
}
class "IAsyncEnumerable`1"<T> {
}
class "IEnumerable`1"<T> {
}
class "IExtractionBucket`1"<T> {
}
interface IClient <<partial>> {
}
class Client <<partial>> {
    + PlanSourceExtractionAsync(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanSourceExtraction(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + PlanExtractionAsync(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanExtraction(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + ExecuteExtractionPlanAsync(plan:ExtractionPlan) : AsyncMeasurementExtraction
    + ExecuteExtractionPlan(plan:ExtractionPlan) : MeasurementExtraction
    - {static} CreateExtractionItem(plan:ExtractionPlan, item:ExtractionPlanItem, bucket:IExtractionBucket<ExtractionMeasurement>) : MeasurementExtractionItem
    - {static} PlanNextExtractionItem(device:ExtractionDevice, last:ExtractionPlanItem, bucket:IExtractionBucket<ExtractionMeasurement>) : ExtractionPlanItem?
    - {static} ExtractionPlanItemCompleted(device:ExtractionDevice, item:ExtractionPlanItem, bucket:IExtractionBucket<ExtractionMeasurement>) : string?
    - {static} ExtractedMeasurementsConsistent(device:ExtractionDevice, period:Period, measurements:IEnumerable<ExtractionMeasurement>) : string?
    - {static} ExtractedMeasurementsValid(device:ExtractionDevice, period:Period, measurements:IEnumerable<ExtractionMeasurement>) : string?
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IClient <<partial>> {
}
class Client <<partial>> {
    + <<async>> PlanDeviceExtractionAsync(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : Task<ExtractionPlan>
    + PlanDeviceExtraction(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : ExtractionPlan
    - PlanDeviceExtraction(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int, now:DateTime, missingDataLogs:IEnumerable<MissingDataLog>, loadLog:LoadLog?) : ExtractionPlan
}
IMeasurementExtractor <|-- IClient
IClient <|-- Client
interface IMeasurementExtractor {
    + ExecuteExtractionPlanAsync(plan:ExtractionPlan) : AsyncMeasurementExtraction
    + ExecuteExtractionPlan(plan:ExtractionPlan) : MeasurementExtraction
    + <<const>> DefaultMeasurementsPerExtractionPlanItem : int = 100
    + <<const>> DefaultMissingDataExtractionPlanItemsLimit : int = 20
    + <<const>> DefaultLoadExtractionSpanLimitInSeconds : int = 7200
    + PlanExtractionAsync(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanExtraction(period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
    + PlanSourceExtractionAsync(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IAsyncEnumerable<ExtractionPlan>
    + PlanSourceExtraction(source:string, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : IEnumerable<ExtractionPlan>
    + PlanDeviceExtractionAsync(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : Task<ExtractionPlan>
    + PlanDeviceExtraction(device:ExtractionDevice, period:Period?, measurementsPerExtractionPlanItem:int, missingDataExtractionPlanItemsLimit:int, loadExtractionSpanLimitInSeconds:int) : ExtractionPlan
    + ExtractMeasurementsAsync(period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractMeasurements(period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractSourceMeasurementsAsync(source:string, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractSourceMeasurements(source:string, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractDeviceMeasurementsAsync(device:ExtractionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + ExtractDeviceMeasurements(device:ExtractionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
class FakeDeviceLoader {
    + LoadDeviceAsync(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : Task
    + LoadDevice(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : void
}
IDeviceLoader <|-- FakeDeviceLoader
class DeviceSourceDeviceData <<struct>> {
}
class DeviceOwnerData <<struct>> {
}
class DeviceMeasurementData <<struct>> {
}
class DeviceStateData <<struct>> {
}
interface IDeviceLoader {
    + LoadDeviceAsync(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : Task
    + LoadDevice(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : void
}
interface IClient <<partial>> {
}
class Client <<partial>> {
    + LoadDeviceAsync(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : Task
    + LoadDevice(source:string, sourceDeviceId:string, sourceDeviceData:DeviceSourceDeviceData?, owner:DeviceOwnerData, measurement:DeviceMeasurementData, state:DeviceStateData) : void
}
IDeviceLoader <|-- IClient
IClient <|-- Client
class AsyncEnrichedMeasurementExtraction <<struct>> {
}
class EnrichedMeasurementExtraction <<struct>> {
}
class EnrichedMeasurementExtractionItem <<struct>> {
}
class EnrichedMeasurementExtractionExtensions <<static>> {
    + {static} Enrich(measurement:MeasurementExtraction, enrich:Func<ExtractionMeasurement, LoadMeasurement>) : EnrichedMeasurementExtraction
    + {static} Enrich(measurement:AsyncMeasurementExtraction, enrich:Func<ExtractionMeasurement, LoadMeasurement>) : AsyncEnrichedMeasurementExtraction
    + {static} EnrichAwait(measurement:AsyncMeasurementExtraction, enrich:Func<ExtractionMeasurement, ValueTask<LoadMeasurement>>) : AsyncEnrichedMeasurementExtraction
}
class "IAsyncEnumerable`1"<T> {
}
class "IEnumerable`1"<T> {
}
class "IExtractionBucket`1"<T> {
}
class FakeMeasurementLoader {
    + LoadMeasurementsAsync(_:AsyncEnrichedMeasurementExtraction) : Task
    + LoadMeasurements(_:EnrichedMeasurementExtraction) : void
}
IMeasurementLoader <|-- FakeMeasurementLoader
interface IMeasurementLoader {
    + LoadMeasurementsAsync(measurements:AsyncEnrichedMeasurementExtraction) : Task
    + LoadMeasurements(measurements:EnrichedMeasurementExtraction) : void
}
class LoadMeasurement <<struct>> {
}
class LoadMeasurementDevice <<struct>> {
}
class LoadMeasurementGeo <<struct>> {
}
class LoadMeasurementData <<struct>> {
}
class LoadMeasurementExtensions <<static>> {
    + {static} ToMeasurement(measurement:LoadMeasurement) : Measurement
    + {static} ToLoadMeasurement(measurement:ExtractionMeasurement, @operator:string, centerId:string, centerUserId:string?, ownerId:string, ownerUserId:string?) : LoadMeasurement
    + {static} ToLoadMeasurement(measurement:ExtractionMeasurement) : LoadMeasurement
}
interface IClient <<partial>> {
}
class Client <<partial>> {
    + <<async>> LoadMeasurementsAsync(extraction:AsyncEnrichedMeasurementExtraction) : Task
    + LoadMeasurements(extraction:EnrichedMeasurementExtraction) : void
}
IMeasurementLoader <|-- IClient
IClient <|-- Client
interface IBulkMeasurementProvider {
    + GetMeasurementsAsync(period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurements(period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementSource <|-- IBulkMeasurementProvider
interface IBulkSortedMeasurementProvider {
    + GetMeasurementsSortedAsync(period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurementsSorted(period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementSource <|-- IBulkSortedMeasurementProvider
interface IMeasurementProvider {
    + GetMeasurementsAsync(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurements(device:ProvisionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementSource <|-- IMeasurementProvider
interface IMeasurementSource {
    + Source : string <<get>>
}
interface ISortedMeasurementProvider {
    + GetMeasurementsSortedAsync(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurementsSorted(device:ProvisionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementSource <|-- ISortedMeasurementProvider
class ProvisionDevice <<struct>> {
}
class ProvisionDeviceSourceData <<struct>> {
}
class ProvisionDeviceExtensions <<static>> {
    + {static} ToProvisionDevice(device:Device) : ProvisionDevice
    + {static} ToProvisionDevice(device:ExtractionDevice) : ProvisionDevice
}
class MultiDashboardMeasurements <<struct>> {
}
class MultiDashboardMeasurementData <<struct>> {
}
class DashboardMeasurement <<struct>> {
}
class DashboardMeasurementData <<struct>> {
}
class DashboardMeasurementExtensions <<static>> {
    + {static} ToDashboardMeasurement(@this:Measurement) : DashboardMeasurement
    + {static} ToDashboardMeasurementData(@this:Measurement) : DashboardMeasurementData
    + {static} ToMultiDashboardMeasurements(@this:IEnumerable<Measurement>) : MultiDashboardMeasurements
    + {static} ToMultiDashboardMeasurements(@this:IEnumerable<DashboardMeasurement>) : MultiDashboardMeasurements
    - {static} Interpolate(@this:IEnumerable<DashboardMeasurement>, at:DateTime) : KeyValuePair<string, DashboardMeasurementData>
}
class "IEnumerable`1"<T> {
}
class "IDictionary`2"<T1,T2> {
}
class FakeDashboardMeasurementProvider <<sealed>> <<partial>> {
    + GetDashboardMeasurementsAsync(deviceId:string, period:Period?) : Task<IEnumerable<DashboardMeasurement>>
    + GetDashboardMeasurements(deviceId:string, period:Period?) : IEnumerable<DashboardMeasurement>
    + GetDashboardMeasurementsByOwnerAsync(ownerId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwner(ownerId:string, period:Period?) : MultiDashboardMeasurements
    + GetDashboardMeasurementsByOwnerUserAsync(ownerUserId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwnerUser(ownerUserId:string, period:Period?) : MultiDashboardMeasurements
    - GenerateDashboardMeasurements(period:Period?) : IEnumerable<DashboardMeasurement>
}
IDashboardMeasurementProvider <|-- FakeDashboardMeasurementProvider
FakeDashboardMeasurementProvider o-> "s_energyMinMaxStart" MinMax
FakeDashboardMeasurementProvider o-> "s_powerMinMax" MinMax
interface IClient <<partial>> {
}
class Client <<sealed>> <<partial>> {
    + GetDashboardMeasurementsAsync(deviceId:string, period:Period?) : Task<IEnumerable<DashboardMeasurement>>
    + GetDashboardMeasurements(deviceId:string, period:Period?) : IEnumerable<DashboardMeasurement>
    + GetDashboardMeasurementsByOwnerAsync(ownerId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwner(ownerId:string, period:Period?) : MultiDashboardMeasurements
    + GetDashboardMeasurementsByOwnerUserAsync(ownerUserId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwnerUser(ownerUserId:string, period:Period?) : MultiDashboardMeasurements
}
IDashboardMeasurementProvider <|-- IClient
IClient <|-- Client
interface IDashboardMeasurementProvider {
    + GetDashboardMeasurementsAsync(deviceId:string, period:Period?) : Task<IEnumerable<DashboardMeasurement>>
    + GetDashboardMeasurements(deviceId:string, period:Period?) : IEnumerable<DashboardMeasurement>
    + GetDashboardMeasurementsByOwnerAsync(ownerId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwner(ownerId:string, period:Period?) : MultiDashboardMeasurements
    + GetDashboardMeasurementsByOwnerUserAsync(ownerUserId:string, period:Period?) : Task<MultiDashboardMeasurements>
    + GetDashboardMeasurementsByOwnerUser(ownerUserId:string, period:Period?) : MultiDashboardMeasurements
}
class FakeReceiptMeasurementProvider {
    + GetEnergyMeasurementsAsync(source:string, deviceId:string, period:Period) : Task<(EnergyMeasurement Begin, EnergyMeasurement End)>
    + GetEnergyMeasurements(source:string, deviceId:string, period:Period) : (EnergyMeasurement Begin, EnergyMeasurement End)
    + GetPowerMeasurementAsync(source:string, deviceId:string, period:Period) : Task<PowerMeasurement>
    + GetPowerMeasurement(source:string, deviceId:string, period:Period) : PowerMeasurement
}
IReceiptMeasurementProvider <|-- FakeReceiptMeasurementProvider
FakeReceiptMeasurementProvider o-> "s_energyBeginMinMax" MinMax
FakeReceiptMeasurementProvider o-> "s_energyEndMinMax" MinMax
FakeReceiptMeasurementProvider o-> "s_powerMinMax" MinMax
interface IClient <<partial>> {
}
class Client <<partial>> {
    + GetEnergyMeasurementsAsync(source:string, deviceId:string, period:Period) : Task<(EnergyMeasurement Begin, EnergyMeasurement End)>
    + GetEnergyMeasurements(source:string, deviceId:string, period:Period) : (EnergyMeasurement Begin, EnergyMeasurement End)
    + GetPowerMeasurementAsync(source:string, deviceId:string, period:Period) : Task<PowerMeasurement>
    + GetPowerMeasurement(source:string, deviceId:string, period:Period) : PowerMeasurement
    - SearchFirstAndLastEnergyMeasurements(source:string, deviceId:string, period:Period) : Task<(
      ISearchResponse<Measurement> begin,
      ISearchResponse<Measurement> end)>
    - SearchAveragePowerByFifteenMinutes(source:string, deviceId:string, period:Period?) : Task<ISearchResponse<Measurement>>
}
IReceiptMeasurementProvider <|-- IClient
IClient <|-- Client
class EnergyMeasurement <<struct>> {
}
class PowerMeasurement <<struct>> {
}
interface IReceiptMeasurementProvider {
    + GetEnergyMeasurementsAsync(source:string, deviceId:string, period:Period) : Task<(EnergyMeasurement Begin, EnergyMeasurement End)>
    + GetEnergyMeasurements(source:string, deviceId:string, period:Period) : (EnergyMeasurement Begin, EnergyMeasurement End)
    + GetPowerMeasurementAsync(source:string, deviceId:string, period:Period) : Task<PowerMeasurement>
    + GetPowerMeasurement(source:string, deviceId:string, period:Period) : PowerMeasurement
}
class Client <<sealed>> <<partial>> {
    + <<const>> HelbOzdsSource : string = "HelbOzds"
    + Client(conf:IConfiguration, logger:ILogger<Client>)
    + Dispose() : void
    - OpenSqlConnection() : void
    - CloseSqlConnection() : void
}
IClient <|-- Client
IDisposable <|-- Client
Client --> "Db" IDbConnection
Client --> "Logger" ILogger
interface IClient <<partial>> {
}
interface IClient <<partial>> {
}
class Client <<sealed>> <<partial>> {
    + Source : string <<get>>
    + GetMeasurementsAsync(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurements(device:ProvisionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    - Convert(measurement:Measurement) : ExtractionMeasurement
}
IMeasurementProvider <|-- IClient
IClient <|-- Client
class Client <<sealed>> <<partial>> {
    + <<const>> FakeSource : string = "FakeSource"
    + <<const>> FakeDeviceId : string = "fakeDevice"
    + <<const>> MeasurementIntervalInSeconds : int = 15
    + Client(logger:ILogger<Client>)
}
class "List`1"<T> {
}
IClient <|-- Client
Client o-> "FakeDeviceIds<string>" "List`1"
Client --> "Logger" ILogger
interface IClient <<partial>> {
}
class Measurement {
    + Measurement(deviceId:string, timestamp:DateTime?, data:DataType?)
    + DeviceId : string <<get>> <<init>>
    + {static} Generate(deviceId:string, timestamp:DateTime) : Measurement
}
class DataType {
    + energyIn : decimal <<get>> <<init>> = default
    + energyIn_T1 : decimal <<get>> <<init>> = default
    + energyIn_T2 : decimal <<get>> <<init>> = default
    + powerIn : decimal <<get>> <<init>> = default
    + dongleId : string? <<get>> <<init>> = default
    + meterIdent : string? <<get>> <<init>> = default
    + meterSerial : string? <<get>> <<init>> = default
    + localTime : string? <<get>> <<init>> = default
    + localDate : string? <<get>> <<init>> = default
    + tariff : int? <<get>> <<init>> = default
    + limiter : int? <<get>> <<init>> = default
    + fuseSupervisionL1 : int? <<get>> <<init>> = default
    + disconnectControl : int? <<get>> <<init>> = default
    + numLongPwrFailures : int? <<get>> <<init>> = default
    + numPwrFailures : int? <<get>> <<init>> = default
    + numVoltageSagsL1 : int? <<get>> <<init>> = default
    + numVoltageSagsL2 : int? <<get>> <<init>> = default
    + numVoltageSagsL3 : int? <<get>> <<init>> = default
    + numVoltageSwellsL1 : int? <<get>> <<init>> = default
    + numVoltageSwellsL2 : int? <<get>> <<init>> = default
    + numVoltageSwellsL3 : int? <<get>> <<init>> = default
    + currentL1 : decimal? <<get>> <<init>> = default
    + currentL2 : decimal? <<get>> <<init>> = default
    + currentL3 : decimal? <<get>> <<init>> = default
    + energyOut : decimal? <<get>> <<init>> = default
    + energyOut_T1 : decimal? <<get>> <<init>> = default
    + energyOut_T2 : decimal? <<get>> <<init>> = default
    + powerInL1 : decimal? <<get>> <<init>> = default
    + powerInL2 : decimal? <<get>> <<init>> = default
    + powerInL3 : decimal? <<get>> <<init>> = default
    + powerOut : decimal? <<get>> <<init>> = default
    + powerOutL1 : decimal? <<get>> <<init>> = default
    + powerOutL2 : decimal? <<get>> <<init>> = default
    + powerOutL3 : decimal? <<get>> <<init>> = default
    + voltageL1 : decimal? <<get>> <<init>> = default
    + voltageL2 : decimal? <<get>> <<init>> = default
    + voltageL3 : decimal? <<get>> <<init>> = default
}
Measurement o-> "Timestamp" DateTime
Measurement o-> "Data" DataType
Measurement o-> "s_energyMinMax" MinMax
Measurement o-> "s_powerMinMax" MinMax
Measurement +-- DataType
interface IClient <<partial>> {
}
class Client <<sealed>> <<partial>> {
    + Source : string <<get>>
    + GetMeasurementsAsync(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurements(device:ProvisionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    - Convert(measurement:Measurement) : ExtractionMeasurement
}
IMeasurementProvider <|-- IClient
IClient <|-- Client
class Client <<sealed>> <<partial>> {
    + <<const>> MyEnergyCommunitySource : string = "MyEnergyCommunity"
    + Client(conf:IConfiguration, logger:ILogger<Client>)
}
IClient <|-- Client
Client --> "Http" HttpClient
Client --> "Logger" ILogger
class "ErrorWrap`1"<T> {
    + ErrorWrap(result:T)
    + ErrorWrap(error:string)
    + Result : T? <<get>> = default
    + Error : string? <<get>> = default
    + Deconstruct(result:T?, error:string?) : void
}
interface IClient <<partial>> {
}
class Measurement {
    + deviceId : string <<get>> <<init>>
    + deviceType : double <<get>> <<init>>
    + <<override>> Equals(obj:object?) : bool
    + Equals(other:Measurement?) : bool
    + <<override>> GetHashCode() : int
}
class GeoCoordinates {
    + longitude : decimal <<get>> <<init>>
    + latitude : decimal <<get>> <<init>>
}
class Data {
    + energyIn : decimal <<get>> <<init>> = default
    + energyIn_T1 : decimal <<get>> <<init>> = default
    + energyIn_T2 : decimal <<get>> <<init>> = default
    + powerIn : decimal <<get>> <<init>> = default
    + dongleId : string? <<get>> <<init>> = default
    + meterIdent : string? <<get>> <<init>> = default
    + meterSerial : string? <<get>> <<init>> = default
    + localTime : string? <<get>> <<init>> = default
    + localDate : string? <<get>> <<init>> = default
    + tariff : int? <<get>> <<init>> = default
    + limiter : int? <<get>> <<init>> = default
    + fuseSupervisionL1 : int? <<get>> <<init>> = default
    + disconnectControl : int? <<get>> <<init>> = default
    + numLongPwrFailures : int? <<get>> <<init>> = default
    + numPwrFailures : int? <<get>> <<init>> = default
    + numVoltageSagsL1 : int? <<get>> <<init>> = default
    + numVoltageSagsL2 : int? <<get>> <<init>> = default
    + numVoltageSagsL3 : int? <<get>> <<init>> = default
    + numVoltageSwellsL1 : int? <<get>> <<init>> = default
    + numVoltageSwellsL2 : int? <<get>> <<init>> = default
    + numVoltageSwellsL3 : int? <<get>> <<init>> = default
    + currentL1 : decimal? <<get>> <<init>> = default
    + currentL2 : decimal? <<get>> <<init>> = default
    + currentL3 : decimal? <<get>> <<init>> = default
    + energyOut : decimal? <<get>> <<init>> = default
    + energyOut_T1 : decimal? <<get>> <<init>> = default
    + energyOut_T2 : decimal? <<get>> <<init>> = default
    + powerInL1 : decimal? <<get>> <<init>> = default
    + powerInL2 : decimal? <<get>> <<init>> = default
    + powerInL3 : decimal? <<get>> <<init>> = default
    + powerOut : decimal? <<get>> <<init>> = default
    + powerOutL1 : decimal? <<get>> <<init>> = default
    + powerOutL2 : decimal? <<get>> <<init>> = default
    + powerOutL3 : decimal? <<get>> <<init>> = default
    + voltageL1 : decimal? <<get>> <<init>> = default
    + voltageL2 : decimal? <<get>> <<init>> = default
    + voltageL3 : decimal? <<get>> <<init>> = default
}
Measurement o-> "deviceDateTime" DateTime
Measurement o-> "geoCoordinates" GeoCoordinates
Measurement o-> "measurementData" Data
Measurement +-- GeoCoordinates
Measurement +-- Data
interface IClient <<partial>> {
}
class Client <<sealed>> <<partial>> {
    + Source : string <<get>>
    + GetMeasurementsAsync(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    + GetMeasurements(device:ProvisionDevice, period:Period?) : IEnumerable<IExtractionBucket<ExtractionMeasurement>>
    - GetMeasurementsViaSplitting(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
    - <<async>> GetNativeMeasurements(device:ProvisionDevice, period:Period, continuationToken:string?) : Task<ErrorWrap<Response<Measurement>>>
    - CreateRequest(device:ProvisionDevice, period:Period?, continuationToken:string?) : HttpRequestMessage
    - <<async>> SendRequest(request:HttpRequestMessage) : Task<ErrorWrap<HttpResponseMessage>>
    - <<async>> ParseMessage(message:HttpResponseMessage) : Task<ErrorWrap<Response<Measurement>>>
    - Convert(measurement:Measurement) : ExtractionMeasurement
    - <<async>> GetMeasurementsViaContinuationToken(device:ProvisionDevice, period:Period?) : IAsyncEnumerable<IExtractionBucket<ExtractionMeasurement>>
}
IMeasurementProvider <|-- IClient
IClient <|-- Client
class "Response`1"<T> {
    + continuationToken : string? <<get>> <<init>> = default
}
class "IEnumerable`1"<T> {
}
"Response`1" o-> "items<T>" "IEnumerable`1"
@enduml
