@page "{secondarySiteContentItemId}"

@using Ozds.Util

@model Ozds.Modules.Members.Pages.DashboardModel

@{
  ViewLayout = "LayoutDashboard";
}

@{
  var measurements = Model.Measurements;
}

<div class="d-flex flex-column align-items-center">
  <h3>
    @T["Energy"].Value :
  </h3>
  <div class="d-flex flex-column flex-lg-row w-100">
    <div
        class="
          d-block justify-content-center
          position-relative flex-shrink-1">
      <canvas id="energy-doughnut" />
    </div>
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="energy-lines" />
    </div>
  </div>

  <h3>
    @T["Power"].Value :
  </h3>
  <div class="d-flex flex-column flex-lg-row w-100">
    <div
        class="
          d-block justify-content-center
          position-relative flex-shrink-1">
      <canvas id="power-doughnut" />
    </div>
    <div
        class="
          d-block justify-content-center
          position-relative flex-grow-1">
      <canvas id="power-lines" />
    </div>
  </div>
</div>

<script depends-on="ozdstheme-chartjs">
  window.onload = () => {
    const measurements = @Html.Raw(measurements.ToJson());
    const lineLabels =
      measurements.map(measurement =>
        new Date(measurement.Date)
          .toLocaleTimeString());
    const energy = measurements[measurements.length -1].Energy;
    const power = measurements[measurements.length -1].Power;

    new Chart(
      "energy-lines",
      {
        type: "line",
        data: {
          labels: lineLabels,
          datasets: [
            {
              label: '@T["Energy"].Value (kWh)',
              data: measurements.map(measurement => measurement.Energy),
              borderColor: "Blue",
              backgroundColor: "Blue",
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          plugins: {
            legend: false
          },
        },
      });

    new Chart(
      "power-lines",
      {
        type: "line",
        data: {
          labels: lineLabels,
          datasets: [
            {
              label: '@T["Power"].Value (kW)',
              data: measurements.map(measurement => measurement.Power),
              borderColor: "Red",
              backgroundColor: "Red",
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          plugins: {
            legend: false
          },
        },
      });

    new Chart(
      "energy-doughnut",
      {
        type: "doughnut",
        data: {
          labels: [ '@T["Energy"].Value (kWh)' ],
          datasets: [
            {
              label: [ '@T["Current Energy"].Value (kWh)', '' ],
              data: [ energy, 300 - energy ],
              backgroundColor: ["Blue", "White"],
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          rotation: 270,
          circumference: 180,
          plugins: {
            legend: false
          },
        },
      });

    new Chart(
      "power-doughnut",
      {
        type: "doughnut",
        data: {
          labels: [ '@T["Power"].Value (kW)' ],
          datasets: [
            {
              label: [ '@T["Current Power"].Value (kW)', '' ],
              data: [ power, 20 - power ],
              backgroundColor: ["Red", "White"]
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          rotation: 270,
          circumference: 180,
          plugins: {
            legend: false
          },
        },
      });
  }
</script>
